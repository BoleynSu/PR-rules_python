workspace(name = "pip_repository_annotations_example")

load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

local_repository(
    name = "rules_python",
    path = "../..",
)

http_archive(
    name = "aspect_bazel_lib",
    sha256 = "acad0272a64362354756a27f43bddd9150368ee8b96eb2c114cfd2f9e4ce6c13",
    strip_prefix = "bazel-lib-0.7.0",
    url = "https://github.com/aspect-build/bazel-lib/archive/refs/tags/v0.7.0.tar.gz",
)

load("@rules_python//python:repositories.bzl", "python_register_toolchains")

python_register_toolchains(
    name = "python39",
    python_version = "3.9",
)

load("@rules_python//python:pip.bzl", "pip_parse")

# This repository isn't referenced, except by our test that asserts the requirements.bzl is updated.
# It also wouldn't be needed by users of this ruleset.
pip_parse(
    name = "pip_parsed",
    python_interpreter_target = "@python39//:python3",
    requirements_lock = "//:requirements.txt",
)

# This example vendors the file produced by `pip_parse` above into the repo.
# This way our Bazel doesn't eagerly fetch and install the pip_parsed
# repository for builds that don't need it.
# See discussion of the trade-offs in the pip_parse documentation
# and the "vendor_requirements" target in the BUILD file.
load("//:requirements.bzl", "install_deps")

install_deps()
